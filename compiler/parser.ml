type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LBRACK
  | RBRACK
  | LPANGLE
  | LANGLE
  | RANGLE
  | ASSIGN
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EQ
  | NEQ
  | LESS
  | LEQ
  | GRT
  | GEQ
  | AT
  | SPLIT
  | SEARCH
  | RM
  | NOT
  | AND
  | OR
  | COUT
  | CIN
  | INT
  | STR
  | BOOL
  | IF
  | WHILE
  | RETURN
  | OPEN
  | CLOSE
  | BREAK
  | EOF
  | VOID
  | TRUE
  | FALSE
  | STD
  | END
  | LIT_INT of (int)
  | LIT_STR of (string)
  | ID of (string)

open Parsing;;
# 1 "parser.mly"
 open Ast 
# 56 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LBRACK *);
  264 (* RBRACK *);
  265 (* LPANGLE *);
  266 (* LANGLE *);
  267 (* RANGLE *);
  268 (* ASSIGN *);
  269 (* PLUS *);
  270 (* MINUS *);
  271 (* TIMES *);
  272 (* DIVIDE *);
  273 (* EQ *);
  274 (* NEQ *);
  275 (* LESS *);
  276 (* LEQ *);
  277 (* GRT *);
  278 (* GEQ *);
  279 (* AT *);
  280 (* SPLIT *);
  281 (* SEARCH *);
  282 (* RM *);
  283 (* NOT *);
  284 (* AND *);
  285 (* OR *);
  286 (* COUT *);
  287 (* CIN *);
  288 (* INT *);
  289 (* STR *);
  290 (* BOOL *);
  291 (* IF *);
  292 (* WHILE *);
  293 (* RETURN *);
  294 (* OPEN *);
  295 (* CLOSE *);
  296 (* BREAK *);
    0 (* EOF *);
  297 (* VOID *);
  298 (* TRUE *);
  299 (* FALSE *);
  300 (* STD *);
  301 (* END *);
    0|]

let yytransl_block = [|
  302 (* LIT_INT *);
  303 (* LIT_STR *);
  304 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\003\000\004\000\004\000\004\000\005\000\
\005\000\007\000\007\000\002\000\006\000\006\000\006\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\010\000\010\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\011\000\011\000\012\000\
\012\000\000\000"

let yylen = "\002\000\
\000\000\002\000\002\000\008\000\001\000\001\000\001\000\000\000\
\001\000\002\000\004\000\003\000\000\000\002\000\002\000\002\000\
\003\000\003\000\005\000\007\000\005\000\002\000\003\000\003\000\
\000\000\002\000\001\000\001\000\001\000\001\000\003\000\003\000\
\005\000\005\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\004\000\004\000\004\000\006\000\003\000\
\003\000\003\000\003\000\004\000\003\000\000\000\001\000\001\000\
\003\000\002\000"

let yydefred = "\000\000\
\001\000\000\000\000\000\005\000\006\000\007\000\002\000\003\000\
\000\000\000\000\012\000\000\000\000\000\000\000\000\000\010\000\
\000\000\000\000\013\000\000\000\000\000\011\000\000\000\025\000\
\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\030\000\027\000\028\000\000\000\015\000\000\000\014\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\000\018\000\
\026\000\000\000\000\000\000\000\000\000\017\000\023\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\048\000\000\000\000\000\035\000\036\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\052\000\000\000\000\000\
\044\000\045\000\046\000\000\000\000\000\000\000\021\000\000\000\
\000\000\000\000\000\000\000\000\047\000\020\000"

let yydgoto = "\002\000\
\003\000\007\000\008\000\009\000\014\000\021\000\015\000\040\000\
\041\000\043\000\082\000\083\000"

let yysindex = "\001\000\
\000\000\000\000\254\254\000\000\000\000\000\000\000\000\000\000\
\214\254\024\255\000\000\254\254\222\254\015\255\030\255\000\000\
\033\255\254\254\000\000\027\255\123\000\000\000\108\255\000\000\
\000\000\108\255\108\255\049\255\070\255\108\255\108\255\108\255\
\075\255\000\000\000\000\000\000\003\255\000\000\031\255\000\000\
\011\001\073\001\207\000\186\000\186\000\108\255\108\255\021\001\
\043\001\053\001\000\000\108\255\035\255\042\255\043\255\108\255\
\108\255\108\255\089\255\000\000\108\255\108\255\108\255\108\255\
\108\255\108\255\108\255\108\255\108\255\108\255\000\000\000\000\
\000\000\134\001\134\001\093\001\113\001\000\000\000\000\000\000\
\134\001\093\255\086\255\065\255\094\255\095\255\134\001\000\000\
\000\000\205\000\123\001\000\000\000\000\222\255\222\255\041\255\
\041\255\041\255\041\255\227\000\227\000\000\000\108\255\051\255\
\000\000\000\000\000\000\108\255\108\255\057\255\000\000\134\001\
\100\255\134\001\134\001\227\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\109\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\110\255\000\000\000\000\114\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\047\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\115\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\009\000\000\000\000\000\000\000\000\000\000\000\
\013\255\000\000\117\255\000\000\000\000\000\000\035\000\000\000\
\000\000\093\000\100\000\000\000\000\000\209\255\228\255\081\255\
\113\255\145\255\177\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\147\000\000\000\046\255\
\000\000\061\000\067\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\101\000\000\000\255\255\000\000\000\000\000\000\214\255\
\233\255\000\000\000\000\000\000"

let yytablesize = 668
let yytable = "\042\000\
\073\000\001\000\044\000\045\000\052\000\010\000\048\000\049\000\
\050\000\053\000\013\000\054\000\055\000\016\000\056\000\056\000\
\020\000\017\000\056\000\039\000\074\000\075\000\076\000\077\000\
\011\000\012\000\057\000\058\000\081\000\004\000\005\000\006\000\
\087\000\088\000\089\000\018\000\019\000\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\029\000\
\057\000\029\000\046\000\057\000\029\000\061\000\062\000\063\000\
\064\000\110\000\111\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\104\000\047\000\
\105\000\118\000\022\000\051\000\029\000\029\000\059\000\112\000\
\084\000\039\000\039\000\039\000\114\000\115\000\039\000\085\000\
\086\000\011\000\029\000\103\000\029\000\029\000\029\000\102\000\
\113\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\106\000\107\000\116\000\117\000\058\000\023\000\039\000\039\000\
\008\000\040\000\040\000\040\000\009\000\054\000\040\000\055\000\
\000\000\038\000\000\000\000\000\039\000\000\000\039\000\039\000\
\039\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\000\000\026\000\027\000\000\000\000\000\000\000\040\000\040\000\
\000\000\041\000\041\000\041\000\000\000\000\000\041\000\034\000\
\000\000\035\000\036\000\037\000\040\000\000\000\040\000\040\000\
\040\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\041\000\
\000\000\042\000\042\000\042\000\000\000\000\000\042\000\000\000\
\000\000\000\000\000\000\000\000\041\000\000\000\041\000\041\000\
\041\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\000\000\000\000\000\000\000\000\000\000\000\000\042\000\042\000\
\000\000\037\000\037\000\037\000\000\000\000\000\037\000\000\000\
\000\000\000\000\000\000\000\000\042\000\000\000\042\000\042\000\
\042\000\037\000\037\000\000\000\038\000\038\000\038\000\037\000\
\000\000\038\000\061\000\062\000\063\000\064\000\037\000\037\000\
\067\000\068\000\069\000\070\000\038\000\038\000\000\000\000\000\
\000\000\000\000\038\000\000\000\037\000\000\000\037\000\037\000\
\037\000\038\000\038\000\051\000\051\000\051\000\000\000\000\000\
\051\000\050\000\050\000\050\000\000\000\000\000\050\000\038\000\
\000\000\038\000\038\000\038\000\000\000\000\000\000\000\000\000\
\000\000\051\000\000\000\000\000\000\000\000\000\000\000\050\000\
\051\000\051\000\000\000\043\000\043\000\043\000\050\000\050\000\
\043\000\000\000\000\000\000\000\000\000\000\000\051\000\000\000\
\051\000\051\000\051\000\000\000\050\000\000\000\050\000\050\000\
\050\000\043\000\000\000\000\000\000\000\033\000\033\000\033\000\
\043\000\043\000\033\000\034\000\034\000\034\000\000\000\000\000\
\034\000\000\000\000\000\000\000\000\000\000\000\043\000\000\000\
\043\000\043\000\043\000\033\000\000\000\000\000\000\000\000\000\
\000\000\034\000\033\000\033\000\000\000\031\000\031\000\031\000\
\034\000\034\000\031\000\000\000\032\000\032\000\032\000\000\000\
\033\000\032\000\033\000\033\000\033\000\000\000\034\000\000\000\
\034\000\034\000\034\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\031\000\031\000\023\000\000\000\024\000\025\000\
\000\000\032\000\032\000\000\000\000\000\000\000\000\000\000\000\
\031\000\000\000\031\000\031\000\031\000\000\000\000\000\032\000\
\000\000\032\000\032\000\032\000\019\000\000\000\019\000\019\000\
\026\000\027\000\004\000\005\000\006\000\028\000\029\000\030\000\
\031\000\032\000\033\000\000\000\000\000\000\000\034\000\000\000\
\035\000\036\000\037\000\000\000\000\000\000\000\000\000\000\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\023\000\000\000\000\000\019\000\000\000\
\019\000\019\000\019\000\000\000\000\000\000\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\023\000\000\000\024\000\072\000\000\000\000\000\000\000\026\000\
\027\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\108\000\023\000\034\000\024\000\035\000\
\036\000\037\000\000\000\000\000\026\000\027\000\000\000\000\000\
\000\000\028\000\029\000\030\000\031\000\032\000\033\000\000\000\
\000\000\000\000\034\000\000\000\035\000\036\000\037\000\000\000\
\026\000\027\000\000\000\000\000\000\000\028\000\029\000\030\000\
\031\000\032\000\033\000\060\000\000\000\000\000\034\000\000\000\
\035\000\036\000\037\000\000\000\000\000\078\000\000\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\079\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\080\000\000\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\100\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\101\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\109\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000"

let yycheck = "\023\000\
\043\000\001\000\026\000\027\000\002\001\048\001\030\000\031\000\
\032\000\007\001\012\000\009\001\010\001\048\001\012\001\003\001\
\018\000\003\001\006\001\021\000\044\000\045\000\046\000\047\000\
\001\001\002\001\024\001\025\001\052\000\032\001\033\001\034\001\
\056\000\057\000\058\000\006\001\004\001\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\001\001\
\003\001\003\001\002\001\006\001\006\001\013\001\014\001\015\001\
\016\001\100\000\101\000\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\006\001\002\001\
\008\001\116\000\048\001\001\001\030\001\031\001\048\001\103\000\
\046\001\001\001\002\001\003\001\108\000\109\000\006\001\046\001\
\046\001\001\001\044\001\006\001\046\001\047\001\048\001\003\001\
\046\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\011\001\011\001\050\001\008\001\000\000\002\001\030\001\031\001\
\003\001\001\001\002\001\003\001\003\001\003\001\006\001\003\001\
\255\255\021\000\255\255\255\255\044\001\255\255\046\001\047\001\
\048\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\030\001\031\001\255\255\255\255\255\255\030\001\031\001\
\255\255\001\001\002\001\003\001\255\255\255\255\006\001\044\001\
\255\255\046\001\047\001\048\001\044\001\255\255\046\001\047\001\
\048\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\031\001\
\255\255\001\001\002\001\003\001\255\255\255\255\006\001\255\255\
\255\255\255\255\255\255\255\255\044\001\255\255\046\001\047\001\
\048\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\031\001\
\255\255\001\001\002\001\003\001\255\255\255\255\006\001\255\255\
\255\255\255\255\255\255\255\255\044\001\255\255\046\001\047\001\
\048\001\017\001\018\001\255\255\001\001\002\001\003\001\023\001\
\255\255\006\001\013\001\014\001\015\001\016\001\030\001\031\001\
\019\001\020\001\021\001\022\001\017\001\018\001\255\255\255\255\
\255\255\255\255\023\001\255\255\044\001\255\255\046\001\047\001\
\048\001\030\001\031\001\001\001\002\001\003\001\255\255\255\255\
\006\001\001\001\002\001\003\001\255\255\255\255\006\001\044\001\
\255\255\046\001\047\001\048\001\255\255\255\255\255\255\255\255\
\255\255\023\001\255\255\255\255\255\255\255\255\255\255\023\001\
\030\001\031\001\255\255\001\001\002\001\003\001\030\001\031\001\
\006\001\255\255\255\255\255\255\255\255\255\255\044\001\255\255\
\046\001\047\001\048\001\255\255\044\001\255\255\046\001\047\001\
\048\001\023\001\255\255\255\255\255\255\001\001\002\001\003\001\
\030\001\031\001\006\001\001\001\002\001\003\001\255\255\255\255\
\006\001\255\255\255\255\255\255\255\255\255\255\044\001\255\255\
\046\001\047\001\048\001\023\001\255\255\255\255\255\255\255\255\
\255\255\023\001\030\001\031\001\255\255\001\001\002\001\003\001\
\030\001\031\001\006\001\255\255\001\001\002\001\003\001\255\255\
\044\001\006\001\046\001\047\001\048\001\255\255\044\001\255\255\
\046\001\047\001\048\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\031\001\002\001\255\255\004\001\005\001\
\255\255\030\001\031\001\255\255\255\255\255\255\255\255\255\255\
\044\001\255\255\046\001\047\001\048\001\255\255\255\255\044\001\
\255\255\046\001\047\001\048\001\002\001\255\255\004\001\005\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\255\255\255\255\255\255\044\001\255\255\
\046\001\047\001\048\001\255\255\255\255\255\255\255\255\255\255\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\002\001\255\255\255\255\044\001\255\255\
\046\001\047\001\048\001\255\255\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\002\001\255\255\004\001\005\001\255\255\255\255\255\255\030\001\
\031\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\002\001\044\001\004\001\046\001\
\047\001\048\001\255\255\255\255\030\001\031\001\255\255\255\255\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\255\255\
\255\255\255\255\044\001\255\255\046\001\047\001\048\001\255\255\
\030\001\031\001\255\255\255\255\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\001\001\255\255\255\255\044\001\255\255\
\046\001\047\001\048\001\255\255\255\255\001\001\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\001\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\001\001\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\003\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\003\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\003\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LBRACK\000\
  RBRACK\000\
  LPANGLE\000\
  LANGLE\000\
  RANGLE\000\
  ASSIGN\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  EQ\000\
  NEQ\000\
  LESS\000\
  LEQ\000\
  GRT\000\
  GEQ\000\
  AT\000\
  SPLIT\000\
  SEARCH\000\
  RM\000\
  NOT\000\
  AND\000\
  OR\000\
  COUT\000\
  CIN\000\
  INT\000\
  STR\000\
  BOOL\000\
  IF\000\
  WHILE\000\
  RETURN\000\
  OPEN\000\
  CLOSE\000\
  BREAK\000\
  EOF\000\
  VOID\000\
  TRUE\000\
  FALSE\000\
  STD\000\
  END\000\
  "

let yynames_block = "\
  LIT_INT\000\
  LIT_STR\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 38 "parser.mly"
                   ( [], [] )
# 425 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 39 "parser.mly"
                    ( (_2 :: fst _1), snd _1 )
# 433 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 40 "parser.mly"
                    ( fst _1, (_2 :: snd _1) )
# 441 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'cont_list) in
    Obj.repr(
# 44 "parser.mly"
  (
			{
				returnType = _1;
				fname = _2;
				formals = _4
				body = List.rev _7
			}
		)
# 458 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "parser.mly"
      ( "int" )
# 464 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
        ( "string" )
# 470 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
         ( "boolean")
# 476 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
                ( [] )
# 482 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 60 "parser.mly"
               ( List.rev _1 )
# 489 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 63 "parser.mly"
               ( [(_1, _2)] )
# 497 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'var_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 64 "parser.mly"
                                 ( (_3, _4) :: _1)
# 506 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 67 "parser.mly"
                   ( (_1, _2) )
# 514 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
              ( [] )
# 520 "parser.ml"
               : 'cont_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cont_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 72 "parser.mly"
                   ( _2 :: _1 )
# 528 "parser.ml"
               : 'cont_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cont_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 73 "parser.mly"
                    ( _2 :: _1)
# 536 "parser.ml"
               : 'cont_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 76 "parser.mly"
            ( Expr(_1) )
# 543 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
                     ( Return(_2) )
# 550 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 78 "parser.mly"
                            ( Block(List.rev _2) )
# 557 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 79 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 565 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 80 "parser.mly"
                                         ( If(_3, _5, _7) )
# 574 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 81 "parser.mly"
                                  ( While(_3, _5) )
# 582 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
               ( Break )
# 588 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
                   ( Fop(Open, _2) )
# 595 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                    ( Fop(Close, _2) )
# 602 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
              ( [] )
# 608 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 88 "parser.mly"
                  (_2 :: _1)
# 616 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 91 "parser.mly"
          ( Integer(_1) )
# 623 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 92 "parser.mly"
           ( String(_1) )
# 630 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 93 "parser.mly"
                      ( Id(_1) )
# 637 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
        ( Std("std") )
# 643 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                              ( Oper(_1, Add, _3) )
# 651 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                               ( Oper(_1, Sub, _3) )
# 659 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                          ( OperAt(_1, Add, at, _5) )
# 668 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                           ( OperAt(_1, Sub, at, _5) )
# 677 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                    ( Oper(_1, Mult, _3) )
# 685 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                     ( Oper(_1, Div, _3) )
# 693 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                 ( Oper(_1, Equal, _3) )
# 701 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                  ( Oper(_1, Neq, _3) )
# 709 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                   ( Oper(_1, Less, _3) )
# 717 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                  ( Oper(_1, LessEq, _3) )
# 725 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                  ( Oper(_1, Grt, _3) )
# 733 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                  ( Oper(_1, GrtEq, _3) )
# 741 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                   ( Assign(_1, _3) )
# 749 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 108 "parser.mly"
                             ( Extract(_1, SubChar, _3) )
# 757 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 109 "parser.mly"
                              ( Extract(_1, SubInt, _3) )
# 765 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 110 "parser.mly"
                                            ( Extract(_1, SubStr, _3) )
# 773 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 111 "parser.mly"
                                           ( Sublen(_1, _3, _5) )
# 782 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                   ( Chset(_1, Fnd, _3) )
# 790 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                  ( Chset(_1, Spl, _3) )
# 798 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                  ( Stream(In, _2, _3) )
# 806 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                   ( Stream(Out, _2, _3) )
# 814 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 119 "parser.mly"
                                 ( Call(_1, _3) )
# 822 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                       ( _2 )
# 829 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "parser.mly"
                   ( [] )
# 835 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 124 "parser.mly"
                  ( List.rev _1 )
# 842 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                            ( [_1] )
# 849 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                            ( _3 :: _1 )
# 857 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
