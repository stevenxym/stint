type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LBRACK
  | RBRACK
  | LPANGLE
  | LANGLE
  | RANGLE
  | ASSIGN
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EQ
  | NEQ
  | LESS
  | LEQ
  | GRT
  | GEQ
  | AT
  | SPLIT
  | SEARCH
  | RM
  | NOT
  | AND
  | OR
  | COUT
  | CIN
  | INT
  | STR
  | BOOL
  | IF
  | WHILE
  | RETURN
  | OPEN
  | CLOSE
  | BREAK
  | EOF
  | VOID
  | TRUE
  | FALSE
  | STD
  | END
  | LIT_INT of (int)
  | LIT_STR of (string)
  | ID of (string)

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 57 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LBRACK *);
  264 (* RBRACK *);
  265 (* LPANGLE *);
  266 (* LANGLE *);
  267 (* RANGLE *);
  268 (* ASSIGN *);
  269 (* PLUS *);
  270 (* MINUS *);
  271 (* TIMES *);
  272 (* DIVIDE *);
  273 (* EQ *);
  274 (* NEQ *);
  275 (* LESS *);
  276 (* LEQ *);
  277 (* GRT *);
  278 (* GEQ *);
  279 (* AT *);
  280 (* SPLIT *);
  281 (* SEARCH *);
  282 (* RM *);
  283 (* NOT *);
  284 (* AND *);
  285 (* OR *);
  286 (* COUT *);
  287 (* CIN *);
  288 (* INT *);
  289 (* STR *);
  290 (* BOOL *);
  291 (* IF *);
  292 (* WHILE *);
  293 (* RETURN *);
  294 (* OPEN *);
  295 (* CLOSE *);
  296 (* BREAK *);
    0 (* EOF *);
  297 (* VOID *);
  298 (* TRUE *);
  299 (* FALSE *);
  300 (* STD *);
  301 (* END *);
    0|]

let yytransl_block = [|
  302 (* LIT_INT *);
  303 (* LIT_STR *);
  304 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\003\000\004\000\004\000\004\000\005\000\
\005\000\007\000\007\000\002\000\008\000\008\000\006\000\006\000\
\006\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\011\000\011\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\012\000\012\000\013\000\013\000\000\000"

let yylen = "\002\000\
\000\000\002\000\002\000\008\000\001\000\001\000\001\000\000\000\
\001\000\002\000\004\000\003\000\000\000\002\000\000\000\002\000\
\002\000\002\000\003\000\003\000\005\000\007\000\005\000\002\000\
\003\000\003\000\000\000\002\000\001\000\001\000\001\000\001\000\
\003\000\003\000\005\000\005\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\004\000\004\000\004\000\
\006\000\006\000\003\000\003\000\005\000\007\000\003\000\003\000\
\004\000\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\001\000\000\000\000\000\005\000\006\000\007\000\002\000\003\000\
\000\000\000\000\012\000\000\000\000\000\000\000\000\000\010\000\
\000\000\000\000\015\000\000\000\000\000\011\000\000\000\027\000\
\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\032\000\029\000\030\000\000\000\017\000\000\000\
\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\
\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\058\000\
\020\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
\019\000\025\000\026\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\057\000\000\000\000\000\046\000\047\000\000\000\
\000\000\000\000\000\000\053\000\000\000\023\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\049\000\000\000\000\000\
\022\000"

let yydgoto = "\002\000\
\003\000\007\000\008\000\009\000\014\000\021\000\015\000\000\000\
\041\000\042\000\044\000\085\000\086\000"

let yysindex = "\005\000\
\000\000\000\000\244\254\000\000\000\000\000\000\000\000\000\000\
\235\254\054\255\000\000\244\254\016\255\033\255\063\255\000\000\
\056\255\244\254\000\000\031\255\249\001\000\000\108\002\000\000\
\000\000\108\002\108\002\108\002\079\255\081\255\108\002\108\002\
\108\002\083\255\000\000\000\000\000\000\000\255\000\000\038\255\
\000\000\159\002\245\002\059\002\048\003\219\001\219\001\108\002\
\108\002\181\002\203\002\225\002\000\000\108\002\108\002\086\255\
\000\000\042\255\048\255\108\002\108\002\108\002\108\002\108\002\
\108\002\117\002\108\002\108\002\108\002\108\002\108\002\000\000\
\000\000\000\000\049\255\055\255\091\255\091\255\009\003\029\003\
\000\000\000\000\000\000\067\003\099\255\111\255\067\003\043\255\
\097\255\067\003\067\003\010\255\010\255\086\003\086\003\098\255\
\052\255\052\255\052\255\052\255\045\255\045\255\064\255\059\255\
\078\002\078\002\000\000\108\002\076\255\000\000\000\000\108\002\
\108\002\112\255\077\255\000\000\075\255\000\000\067\003\118\255\
\067\003\067\003\108\002\122\255\078\002\000\000\067\003\000\000\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\131\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\150\255\000\000\000\000\151\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\162\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\152\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\198\255\234\255\000\000\000\000\
\000\000\000\000\000\000\008\255\000\000\155\255\027\255\000\000\
\000\000\112\001\118\001\122\000\158\000\062\001\081\001\014\000\
\190\000\222\000\254\000\030\001\050\000\086\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\090\255\000\000\000\000\012\002\000\000\012\255\000\000\
\144\001\170\001\000\000\000\000\000\000\000\000\176\001\126\255\
\000\000"

let yygindex = "\000\000\
\000\000\138\000\000\000\251\255\000\000\000\000\000\000\000\000\
\213\255\233\255\000\000\000\000\000\000"

let yytablesize = 1135
let yytable = "\043\000\
\074\000\054\000\045\000\046\000\047\000\001\000\013\000\050\000\
\051\000\052\000\061\000\055\000\020\000\061\000\062\000\040\000\
\058\000\062\000\059\000\004\000\005\000\006\000\077\000\078\000\
\079\000\080\000\010\000\045\000\045\000\045\000\084\000\087\000\
\045\000\070\000\071\000\017\000\090\000\091\000\092\000\093\000\
\094\000\095\000\097\000\098\000\099\000\100\000\101\000\102\000\
\109\000\045\000\110\000\058\000\045\000\059\000\011\000\012\000\
\045\000\045\000\058\000\019\000\059\000\117\000\118\000\016\000\
\060\000\061\000\062\000\063\000\018\000\115\000\045\000\110\000\
\045\000\045\000\045\000\070\000\071\000\116\000\022\000\111\000\
\048\000\129\000\049\000\053\000\119\000\056\000\011\000\088\000\
\121\000\122\000\048\000\048\000\048\000\089\000\103\000\048\000\
\048\000\058\000\048\000\127\000\104\000\107\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\108\000\111\000\114\000\048\000\
\048\000\120\000\124\000\123\000\125\000\126\000\054\000\054\000\
\054\000\128\000\063\000\054\000\049\000\048\000\049\000\048\000\
\048\000\048\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\054\000\049\000\049\000\054\000\
\008\000\009\000\059\000\054\000\054\000\060\000\039\000\000\000\
\000\000\000\000\031\000\000\000\031\000\000\000\000\000\031\000\
\031\000\054\000\031\000\054\000\054\000\054\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\000\000\000\000\000\000\031\000\
\031\000\000\000\000\000\000\000\000\000\000\000\056\000\056\000\
\056\000\000\000\000\000\056\000\000\000\031\000\056\000\031\000\
\031\000\031\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\000\000\000\000\000\000\056\000\056\000\000\000\000\000\000\000\
\000\000\000\000\055\000\055\000\055\000\000\000\000\000\055\000\
\000\000\056\000\055\000\056\000\056\000\056\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\000\000\000\000\000\000\055\000\
\055\000\000\000\000\000\000\000\000\000\000\000\029\000\029\000\
\029\000\000\000\000\000\029\000\029\000\055\000\029\000\055\000\
\055\000\055\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\000\000\029\000\029\000\029\000\029\000\029\000\
\000\000\000\000\000\000\029\000\029\000\000\000\000\000\000\000\
\000\000\000\000\052\000\052\000\052\000\000\000\000\000\052\000\
\000\000\029\000\000\000\029\000\029\000\029\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\000\000\000\000\000\000\052\000\
\052\000\000\000\000\000\000\000\000\000\000\000\051\000\051\000\
\051\000\000\000\000\000\051\000\000\000\052\000\000\000\052\000\
\052\000\052\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\000\000\000\000\000\000\051\000\051\000\000\000\000\000\000\000\
\000\000\000\000\037\000\037\000\037\000\000\000\000\000\037\000\
\000\000\051\000\000\000\051\000\051\000\051\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\000\000\000\000\037\000\000\000\000\000\000\000\037\000\
\037\000\000\000\000\000\000\000\000\000\000\000\038\000\038\000\
\038\000\000\000\000\000\038\000\000\000\037\000\000\000\037\000\
\037\000\037\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\000\000\000\000\038\000\
\000\000\000\000\000\000\038\000\038\000\000\000\041\000\041\000\
\041\000\000\000\000\000\041\000\000\000\000\000\000\000\000\000\
\000\000\038\000\000\000\038\000\038\000\038\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\000\000\000\000\041\000\
\000\000\000\000\000\000\041\000\041\000\000\000\042\000\042\000\
\042\000\000\000\000\000\042\000\000\000\000\000\000\000\000\000\
\000\000\041\000\000\000\041\000\041\000\041\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\000\000\000\000\042\000\
\000\000\000\000\000\000\042\000\042\000\000\000\043\000\043\000\
\043\000\000\000\000\000\043\000\000\000\000\000\000\000\000\000\
\000\000\042\000\000\000\042\000\042\000\042\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\000\000\000\000\043\000\
\000\000\000\000\000\000\043\000\043\000\000\000\044\000\044\000\
\044\000\000\000\000\000\044\000\000\000\000\000\000\000\000\000\
\000\000\043\000\000\000\043\000\043\000\043\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\000\000\000\000\044\000\
\000\000\000\000\000\000\044\000\044\000\000\000\039\000\039\000\
\039\000\000\000\000\000\039\000\000\000\000\000\000\000\000\000\
\000\000\044\000\000\000\044\000\044\000\044\000\039\000\039\000\
\000\000\040\000\040\000\040\000\039\000\000\000\040\000\039\000\
\000\000\000\000\000\000\039\000\039\000\000\000\000\000\000\000\
\000\000\040\000\040\000\000\000\000\000\000\000\000\000\040\000\
\000\000\039\000\040\000\039\000\039\000\039\000\040\000\040\000\
\033\000\033\000\033\000\000\000\000\000\033\000\034\000\034\000\
\034\000\000\000\000\000\034\000\040\000\000\000\040\000\040\000\
\040\000\000\000\000\000\000\000\000\000\000\000\033\000\000\000\
\000\000\033\000\000\000\000\000\034\000\033\000\033\000\034\000\
\035\000\035\000\035\000\034\000\034\000\035\000\000\000\000\000\
\000\000\000\000\000\000\033\000\000\000\033\000\033\000\033\000\
\000\000\034\000\000\000\034\000\034\000\034\000\035\000\000\000\
\000\000\035\000\036\000\036\000\036\000\035\000\035\000\036\000\
\050\000\050\000\050\000\000\000\000\000\050\000\000\000\000\000\
\000\000\000\000\000\000\035\000\000\000\035\000\035\000\035\000\
\036\000\000\000\000\000\036\000\000\000\000\000\050\000\036\000\
\036\000\050\000\000\000\000\000\000\000\050\000\050\000\000\000\
\000\000\000\000\000\000\000\000\000\000\036\000\000\000\036\000\
\036\000\036\000\000\000\050\000\023\000\050\000\050\000\050\000\
\000\000\058\000\000\000\059\000\000\000\000\000\000\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\000\000\070\000\071\000\026\000\000\000\000\000\000\000\
\027\000\028\000\023\000\000\000\024\000\025\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\035\000\000\000\
\036\000\037\000\038\000\000\000\000\000\021\000\000\000\021\000\
\021\000\000\000\026\000\000\000\000\000\000\000\027\000\028\000\
\004\000\005\000\006\000\029\000\030\000\031\000\032\000\033\000\
\034\000\000\000\000\000\000\000\035\000\021\000\036\000\037\000\
\038\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\000\000\000\000\000\000\021\000\
\000\000\021\000\021\000\021\000\023\000\000\000\024\000\073\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
\000\000\024\000\000\000\000\000\026\000\000\000\000\000\000\000\
\027\000\028\000\000\000\000\000\000\000\029\000\030\000\031\000\
\032\000\033\000\034\000\000\000\000\000\000\000\035\000\026\000\
\036\000\037\000\038\000\027\000\028\000\023\000\000\000\000\000\
\029\000\030\000\031\000\032\000\033\000\034\000\023\000\000\000\
\000\000\035\000\000\000\036\000\037\000\038\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\026\000\000\000\000\000\
\000\000\027\000\028\000\000\000\000\000\000\000\026\000\000\000\
\000\000\000\000\027\000\028\000\000\000\000\000\000\000\035\000\
\000\000\036\000\037\000\038\000\000\000\000\000\000\000\057\000\
\035\000\000\000\096\000\037\000\038\000\058\000\000\000\059\000\
\000\000\000\000\000\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\081\000\070\000\071\000\
\000\000\000\000\000\000\058\000\000\000\059\000\000\000\000\000\
\000\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\082\000\070\000\071\000\000\000\000\000\
\000\000\058\000\000\000\059\000\000\000\000\000\000\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\083\000\070\000\071\000\000\000\000\000\000\000\058\000\
\000\000\059\000\000\000\000\000\000\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\072\000\
\070\000\071\000\000\000\058\000\000\000\059\000\000\000\000\000\
\000\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\105\000\070\000\071\000\000\000\058\000\
\000\000\059\000\000\000\000\000\000\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\106\000\
\070\000\071\000\000\000\058\000\000\000\059\000\000\000\000\000\
\000\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\000\000\070\000\071\000\075\000\000\000\
\076\000\000\000\000\000\000\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\000\000\070\000\
\071\000\058\000\000\000\059\000\000\000\000\000\000\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\000\000\070\000\071\000\058\000\000\000\059\000\000\000\
\000\000\000\000\060\000\061\000\062\000\063\000\000\000\000\000\
\066\000\067\000\068\000\069\000\000\000\070\000\071\000"

let yycheck = "\023\000\
\044\000\002\001\026\000\027\000\028\000\001\000\012\000\031\000\
\032\000\033\000\003\001\012\001\018\000\006\001\003\001\021\000\
\007\001\006\001\009\001\032\001\033\001\034\001\046\000\047\000\
\048\000\049\000\048\001\001\001\002\001\003\001\054\000\055\000\
\006\001\024\001\025\001\003\001\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\006\001\023\001\008\001\007\001\026\001\009\001\001\001\002\001\
\030\001\031\001\007\001\004\001\009\001\105\000\106\000\048\001\
\013\001\014\001\015\001\016\001\006\001\006\001\044\001\008\001\
\046\001\047\001\048\001\024\001\025\001\019\001\048\001\021\001\
\002\001\125\000\002\001\001\001\108\000\048\001\001\001\046\001\
\112\000\113\000\001\001\002\001\003\001\046\001\046\001\006\001\
\007\001\007\001\009\001\123\000\046\001\003\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\006\001\021\001\021\001\030\001\
\031\001\046\001\046\001\012\001\050\001\008\001\001\001\002\001\
\003\001\008\001\000\000\006\001\007\001\044\001\009\001\046\001\
\047\001\048\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\003\001\003\001\003\001\030\001\031\001\003\001\021\000\255\255\
\255\255\255\255\001\001\255\255\003\001\255\255\255\255\006\001\
\007\001\044\001\009\001\046\001\047\001\048\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\255\255\255\255\255\255\030\001\
\031\001\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\003\001\255\255\255\255\006\001\255\255\044\001\009\001\046\001\
\047\001\048\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\255\255\255\255\255\255\030\001\031\001\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\255\255\255\255\006\001\
\255\255\044\001\009\001\046\001\047\001\048\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\255\255\255\255\255\255\030\001\
\031\001\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\003\001\255\255\255\255\006\001\007\001\044\001\009\001\046\001\
\047\001\048\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\023\001\024\001\025\001\026\001\
\255\255\255\255\255\255\030\001\031\001\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\255\255\255\255\006\001\
\255\255\044\001\255\255\046\001\047\001\048\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\255\255\255\255\255\255\030\001\
\031\001\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\003\001\255\255\255\255\006\001\255\255\044\001\255\255\046\001\
\047\001\048\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\255\255\255\255\255\255\030\001\031\001\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\255\255\255\255\006\001\
\255\255\044\001\255\255\046\001\047\001\048\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\026\001\255\255\255\255\255\255\030\001\
\031\001\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\003\001\255\255\255\255\006\001\255\255\044\001\255\255\046\001\
\047\001\048\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\255\255\026\001\
\255\255\255\255\255\255\030\001\031\001\255\255\001\001\002\001\
\003\001\255\255\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\044\001\255\255\046\001\047\001\048\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\255\255\026\001\
\255\255\255\255\255\255\030\001\031\001\255\255\001\001\002\001\
\003\001\255\255\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\044\001\255\255\046\001\047\001\048\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\255\255\026\001\
\255\255\255\255\255\255\030\001\031\001\255\255\001\001\002\001\
\003\001\255\255\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\044\001\255\255\046\001\047\001\048\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\255\255\026\001\
\255\255\255\255\255\255\030\001\031\001\255\255\001\001\002\001\
\003\001\255\255\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\044\001\255\255\046\001\047\001\048\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\255\255\026\001\
\255\255\255\255\255\255\030\001\031\001\255\255\001\001\002\001\
\003\001\255\255\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\044\001\255\255\046\001\047\001\048\001\017\001\018\001\
\255\255\001\001\002\001\003\001\023\001\255\255\006\001\026\001\
\255\255\255\255\255\255\030\001\031\001\255\255\255\255\255\255\
\255\255\017\001\018\001\255\255\255\255\255\255\255\255\023\001\
\255\255\044\001\026\001\046\001\047\001\048\001\030\001\031\001\
\001\001\002\001\003\001\255\255\255\255\006\001\001\001\002\001\
\003\001\255\255\255\255\006\001\044\001\255\255\046\001\047\001\
\048\001\255\255\255\255\255\255\255\255\255\255\023\001\255\255\
\255\255\026\001\255\255\255\255\023\001\030\001\031\001\026\001\
\001\001\002\001\003\001\030\001\031\001\006\001\255\255\255\255\
\255\255\255\255\255\255\044\001\255\255\046\001\047\001\048\001\
\255\255\044\001\255\255\046\001\047\001\048\001\023\001\255\255\
\255\255\026\001\001\001\002\001\003\001\030\001\031\001\006\001\
\001\001\002\001\003\001\255\255\255\255\006\001\255\255\255\255\
\255\255\255\255\255\255\044\001\255\255\046\001\047\001\048\001\
\023\001\255\255\255\255\026\001\255\255\255\255\023\001\030\001\
\031\001\026\001\255\255\255\255\255\255\030\001\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\044\001\255\255\046\001\
\047\001\048\001\255\255\044\001\002\001\046\001\047\001\048\001\
\255\255\007\001\255\255\009\001\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\024\001\025\001\026\001\255\255\255\255\255\255\
\030\001\031\001\002\001\255\255\004\001\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\044\001\255\255\
\046\001\047\001\048\001\255\255\255\255\002\001\255\255\004\001\
\005\001\255\255\026\001\255\255\255\255\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\255\255\255\255\255\255\044\001\026\001\046\001\047\001\
\048\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\255\255\255\255\255\255\044\001\
\255\255\046\001\047\001\048\001\002\001\255\255\004\001\005\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\004\001\255\255\255\255\026\001\255\255\255\255\255\255\
\030\001\031\001\255\255\255\255\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\255\255\255\255\255\255\044\001\026\001\
\046\001\047\001\048\001\030\001\031\001\002\001\255\255\255\255\
\035\001\036\001\037\001\038\001\039\001\040\001\002\001\255\255\
\255\255\044\001\255\255\046\001\047\001\048\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\026\001\255\255\255\255\
\255\255\030\001\031\001\255\255\255\255\255\255\026\001\255\255\
\255\255\255\255\030\001\031\001\255\255\255\255\255\255\044\001\
\255\255\046\001\047\001\048\001\255\255\255\255\255\255\001\001\
\044\001\255\255\046\001\047\001\048\001\007\001\255\255\009\001\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\001\001\024\001\025\001\
\255\255\255\255\255\255\007\001\255\255\009\001\255\255\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\001\001\024\001\025\001\255\255\255\255\
\255\255\007\001\255\255\009\001\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\001\001\024\001\025\001\255\255\255\255\255\255\007\001\
\255\255\009\001\255\255\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\003\001\
\024\001\025\001\255\255\007\001\255\255\009\001\255\255\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\003\001\024\001\025\001\255\255\007\001\
\255\255\009\001\255\255\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\003\001\
\024\001\025\001\255\255\007\001\255\255\009\001\255\255\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\255\255\024\001\025\001\007\001\255\255\
\009\001\255\255\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\024\001\
\025\001\007\001\255\255\009\001\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\024\001\025\001\007\001\255\255\009\001\255\255\
\255\255\255\255\013\001\014\001\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LBRACK\000\
  RBRACK\000\
  LPANGLE\000\
  LANGLE\000\
  RANGLE\000\
  ASSIGN\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  EQ\000\
  NEQ\000\
  LESS\000\
  LEQ\000\
  GRT\000\
  GEQ\000\
  AT\000\
  SPLIT\000\
  SEARCH\000\
  RM\000\
  NOT\000\
  AND\000\
  OR\000\
  COUT\000\
  CIN\000\
  INT\000\
  STR\000\
  BOOL\000\
  IF\000\
  WHILE\000\
  RETURN\000\
  OPEN\000\
  CLOSE\000\
  BREAK\000\
  EOF\000\
  VOID\000\
  TRUE\000\
  FALSE\000\
  STD\000\
  END\000\
  "

let yynames_block = "\
  LIT_INT\000\
  LIT_STR\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 34 "parser.mly"
                   ( [], [] )
# 548 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 35 "parser.mly"
                    ( (_2 :: fst _1), snd _1 )
# 556 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 36 "parser.mly"
                    ( fst _1, (_2 :: snd _1) )
# 564 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'cont_list) in
    Obj.repr(
# 40 "parser.mly"
  (
			{
				returnType = _1;
				fname = _2;
				formals = _4
				body = List.rev _7
			}
		)
# 581 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
      ( Int("int") )
# 587 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
        ( String("string") )
# 593 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 52 "parser.mly"
         ( Boolean("boolean") )
# 599 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
                ( [] )
# 605 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 56 "parser.mly"
               ( List.rev _1 )
# 612 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 59 "parser.mly"
               ( [(_1, _2)] )
# 620 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'var_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 60 "parser.mly"
                                 ( (_3, _4) :: _1)
# 629 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 63 "parser.mly"
                   ( (_1, _2) )
# 637 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
              ( [] )
# 643 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 67 "parser.mly"
                     ( _2 :: _1 )
# 651 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
              ( [] )
# 657 "parser.ml"
               : 'cont_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cont_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 71 "parser.mly"
                   ( _2 :: _1 )
# 665 "parser.ml"
               : 'cont_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cont_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 72 "parser.mly"
                    ( _2 :: _1)
# 673 "parser.ml"
               : 'cont_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
            ( Expr(_1) )
# 680 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 76 "parser.mly"
                     ( Return(_2) )
# 687 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 77 "parser.mly"
                            ( Block(List.rev _2) )
# 694 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 78 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 702 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 79 "parser.mly"
                                         ( If(_3, _5, _7) )
# 711 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 80 "parser.mly"
                                  ( While(_3, _5) )
# 719 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
               ( Break )
# 725 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                   ( Fop(Open, _2) )
# 732 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
                    ( Fop(Close, _2) )
# 739 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
              ( [] )
# 745 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 87 "parser.mly"
                  (_2 :: _1)
# 753 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 90 "parser.mly"
          ( Integer(_1) )
# 760 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 91 "parser.mly"
           ( String(_1) )
# 767 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 92 "parser.mly"
       ( Id(_1) )
# 774 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
        ( Std("std") )
# 780 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                              ( Oper(_1, Add, _3) )
# 788 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                               ( Oper(_1, Sub, _3) )
# 796 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                          ( OperAt(_1, Add, at, _5) )
# 805 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                           ( OperAt(_1, Sub, at, _5) )
# 814 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                    ( Oper(_1, Mult, _3) )
# 822 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                     ( Oper(_1, Div, _3) )
# 830 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                 ( Oper(_1, Equal, _3) )
# 838 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                  ( Oper(_1, Neq, _3) )
# 846 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                   ( Oper(_1, Less, _3) )
# 854 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                  ( Oper(_1, LessEq, _3) )
# 862 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                  ( Oper(_1, Grt, _3) )
# 870 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                  ( Oper(_1, GrtEq, _3) )
# 878 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                   ( Assign(_1, _3) )
# 886 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 107 "parser.mly"
                               ( Extract(_1, SubChar, _3) )
# 894 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 108 "parser.mly"
                             ( Extract(_1, SubInt, _3) )
# 902 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 109 "parser.mly"
                          ( Extract(_1, SubStr, _3) )
# 910 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 110 "parser.mly"
                                             ( Sublen(_1, _3, _5) )
# 919 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                                      ()
# 928 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                     ( Chset(_1, Fnd, _3) )
# 936 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                    ( Chset(_1, Spl, _3) )
# 944 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 114 "parser.mly"
                                 ( Remove1(_2, _4) )
# 952 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 115 "parser.mly"
                                                ( Remove2(_2, _4, _6) )
# 961 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                  ( Stream(In, _2, _3) )
# 969 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                   ( Stream(Out, _2, _3) )
# 977 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 118 "parser.mly"
                                 ( Call(_1, _3) )
# 985 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                       ( _2 )
# 992 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 122 "parser.mly"
                  ( [] )
# 998 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 123 "parser.mly"
                  ( List.rev _1 )
# 1005 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                            ( [_1] )
# 1012 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                            ( _3 :: _1 )
# 1020 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
